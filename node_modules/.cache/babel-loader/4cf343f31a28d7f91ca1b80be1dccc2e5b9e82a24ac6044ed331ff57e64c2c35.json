{"ast":null,"code":"var fs = require('fs');\nvar file = require('file');\nvar MarkdownIt = require('markdown-it');\nvar polyfills = require('./polyfills.json');\nvar viewRoot = fs.realpathSync(__dirname + '/../feature-detects');\nfunction metadata(cb) {\n  var tests = [];\n  var md = new MarkdownIt();\n  file.walkSync(viewRoot, function (start, dirs, files) {\n    files.forEach(function (file) {\n      if (file === '.DS_Store') {\n        return;\n      }\n      var test = fs.readFileSync(start + '/' + file, 'utf8');\n      // TODO:: make this regex not suck\n      var metaRE = /\\/\\*\\!([\\s\\S]*)\\!\\*\\//m;\n      var matches = test.match(metaRE);\n      var docRE = /\\/\\*\\sDOC([\\s\\S]*?)\\*\\//m;\n      var docmatches = test.match(docRE);\n      var depRE = /define\\((\\[[^\\]]*\\]),/;\n      var depMatches = test.match(depRE);\n      var metadata;\n      if (matches && matches[1]) {\n        try {\n          metadata = JSON.parse(matches[1]);\n        } catch (e) {\n          throw new Error('Error Parsing Metadata: ' + file + '\\nInput: `' + matches[1] + '`');\n        }\n      } else {\n        metadata = {};\n      }\n      var docs = null;\n      if (docmatches && docmatches[1]) {\n        docs = md.render(docmatches[1].trim());\n      }\n      metadata.doc = docs;\n      var deps = [];\n      var matchedDeps;\n      if (depMatches && depMatches[1]) {\n        try {\n          matchedDeps = JSON.parse(depMatches[1].replace(/'/g, '\"'));\n        } catch (e) {\n          throw new Error('Couldn\\'t parse dependencies for `' + file + '`:\\n`' + depMatches[1] + '\\n`');\n        }\n        matchedDeps.forEach(function (dep) {\n          if (dep === 'Modernizr') {\n            return;\n          }\n          deps.push(dep);\n        });\n      } else {\n        throw new Error('Couldn\\'t find the define for `' + file + '`');\n      }\n      metadata.deps = deps;\n      var baseDir = __dirname.replace(/lib$/, '');\n      metadata.path = './' + (start + '/' + file).replace(baseDir, '').replace(/\\\\/g, '/');\n      metadata.amdPath = metadata.path.replace(/^\\.\\/feature\\-detects/, 'test').replace(/\\.js$/i, '');\n      if (!metadata.name) {\n        metadata.name = metadata.amdPath;\n      }\n      var pfs = [];\n      if (metadata.polyfills && metadata.polyfills.length) {\n        metadata.polyfills.forEach(function (polyname) {\n          if (polyfills[polyname]) {\n            pfs.push(polyfills[polyname]);\n          } else {\n            throw new Error(metadata.name + ': Polyfill not found in `' + file + '`: ' + polyname);\n          }\n        });\n      }\n      metadata.polyfills = pfs;\n      if (!metadata.async) {\n        metadata.async = false;\n      }\n      if (!metadata.notes) {\n        metadata.notes = [];\n      }\n      if (!metadata.warnings) {\n        metadata.warnings = [];\n      }\n      if (!metadata.caniuse) {\n        metadata.caniuse = null;\n      }\n      if (!metadata.cssclass && metadata.property) {\n        metadata.cssclass = metadata.property;\n      } else {\n        metadata.cssclass = null;\n      }\n\n      // Maybe catch a bug\n      if (!metadata.doc && metadata.docs) {\n        metadata.doc = metadata.docs;\n        delete metadata.docs;\n      }\n\n      // If you want markdown parsed code minus the docs and metadata, this'll do it.\n      // Off by default for now.\n      // metadata.code =  md.render('```javascript\\n' + test.replace(metaRE, '').replace(docRE, '') + '\\n```');\n\n      if (!metadata.tags) {\n        metadata.tags = [];\n      }\n      if (!metadata.authors) {\n        metadata.authors = [];\n      }\n      if (!metadata.knownBugs) {\n        metadata.knownBugs = [];\n      }\n      tests.push(metadata);\n    });\n  });\n  if (cb && typeof cb === 'function') {\n    return cb(tests);\n  }\n  return tests;\n}\nmodule.exports = metadata;","map":{"version":3,"names":["fs","require","file","MarkdownIt","polyfills","viewRoot","realpathSync","__dirname","metadata","cb","tests","md","walkSync","start","dirs","files","forEach","test","readFileSync","metaRE","matches","match","docRE","docmatches","depRE","depMatches","JSON","parse","e","Error","docs","render","trim","doc","deps","matchedDeps","replace","dep","push","baseDir","path","amdPath","name","pfs","length","polyname","async","notes","warnings","caniuse","cssclass","property","tags","authors","knownBugs","module","exports"],"sources":["C:/Users/Syahrul/PKM/test-react/portfolio-alpha/node_modules/modernizr/lib/metadata.js"],"sourcesContent":["var fs = require('fs');\nvar file = require('file');\nvar MarkdownIt = require('markdown-it');\nvar polyfills = require('./polyfills.json');\nvar viewRoot = fs.realpathSync(__dirname + '/../feature-detects');\n\nfunction metadata(cb) {\n  var tests = [];\n  var md = new MarkdownIt();\n  file.walkSync(viewRoot, function(start, dirs, files) {\n    files.forEach(function(file) {\n      if (file === '.DS_Store') {\n        return;\n      }\n      var test = fs.readFileSync(start + '/' + file, 'utf8');\n      // TODO:: make this regex not suck\n      var metaRE = /\\/\\*\\!([\\s\\S]*)\\!\\*\\//m;\n      var matches = test.match(metaRE);\n      var docRE = /\\/\\*\\sDOC([\\s\\S]*?)\\*\\//m;\n      var docmatches = test.match(docRE);\n      var depRE = /define\\((\\[[^\\]]*\\]),/;\n      var depMatches = test.match(depRE);\n\n      var metadata;\n\n      if (matches && matches[1]) {\n        try {\n          metadata = JSON.parse(matches[1]);\n        } catch (e) {\n          throw new Error('Error Parsing Metadata: ' + file + '\\nInput: `' + matches[1] + '`');\n        }\n      }\n      else {\n        metadata = {};\n      }\n\n      var docs = null;\n\n      if (docmatches && docmatches[1]) {\n        docs = md.render(docmatches[1].trim());\n      }\n\n      metadata.doc = docs;\n\n      var deps = [];\n      var matchedDeps;\n\n      if (depMatches && depMatches[1]) {\n        try {\n          matchedDeps = JSON.parse(depMatches[1].replace(/'/g, '\"'));\n        } catch (e) {\n          throw new Error('Couldn\\'t parse dependencies for `' + file + '`:\\n`' + depMatches[1] + '\\n`');\n        }\n        matchedDeps.forEach(function(dep) {\n          if (dep === 'Modernizr') {\n            return;\n          }\n          deps.push(dep);\n        });\n      } else {\n        throw new Error('Couldn\\'t find the define for `' + file + '`');\n      }\n      metadata.deps = deps;\n\n      var baseDir = __dirname.replace(/lib$/, '');\n      metadata.path = './' + (start + '/' + file).replace(baseDir, '').replace(/\\\\/g, '/');\n      metadata.amdPath = metadata.path.replace(/^\\.\\/feature\\-detects/, 'test').replace(/\\.js$/i, '');\n\n      if (!metadata.name) {\n        metadata.name = metadata.amdPath;\n      }\n\n      var pfs = [];\n      if (metadata.polyfills && metadata.polyfills.length) {\n        metadata.polyfills.forEach(function(polyname) {\n          if (polyfills[polyname]) {\n            pfs.push(polyfills[polyname]);\n          }\n          else {\n            throw new Error(metadata.name + ': Polyfill not found in `' + file + '`: ' + polyname);\n          }\n        });\n      }\n      metadata.polyfills = pfs;\n\n      if (!metadata.async) {\n        metadata.async = false;\n      }\n\n      if (!metadata.notes) {\n        metadata.notes = [];\n      }\n\n      if (!metadata.warnings) {\n        metadata.warnings = [];\n      }\n\n      if (!metadata.caniuse) {\n        metadata.caniuse = null;\n      }\n\n      if (!metadata.cssclass && metadata.property) {\n        metadata.cssclass = metadata.property;\n      } else {\n        metadata.cssclass = null;\n      }\n\n      // Maybe catch a bug\n      if (!metadata.doc && metadata.docs) {\n        metadata.doc = metadata.docs;\n        delete metadata.docs;\n      }\n\n      // If you want markdown parsed code minus the docs and metadata, this'll do it.\n      // Off by default for now.\n      // metadata.code =  md.render('```javascript\\n' + test.replace(metaRE, '').replace(docRE, '') + '\\n```');\n\n      if (!metadata.tags) {\n        metadata.tags = [];\n      }\n\n      if (!metadata.authors) {\n        metadata.authors = [];\n      }\n\n      if (!metadata.knownBugs) {\n        metadata.knownBugs = [];\n      }\n\n      tests.push(metadata);\n    });\n  });\n\n  if (cb && typeof cb === 'function') {\n    return cb(tests);\n  }\n  return tests;\n}\n\nmodule.exports = metadata;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}